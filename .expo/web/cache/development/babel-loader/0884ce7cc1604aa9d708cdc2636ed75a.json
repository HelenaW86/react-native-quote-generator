{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport styled from \"styled-components/native\";\nimport { Accelerometer } from \"expo-sensors\";\nvar QuoteText = styled.Text(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  color: #e8589d;\\n  font-weight: 700;\\n  font-size: 25px;\\n  width: 300px;\\n  margin: 20px;\\n\"])));\nvar InfoText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  font-size: 20px;\\n  width: 300px;\\n  margin: 20px;\\n\"])));\nvar AuthorText = styled.Text(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  margin: 20px;\\n\"])));\n\nvar ShakeApi = function ShakeApi() {\n  var _useState = useState({\n    x: 0,\n    y: 0,\n    z: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      quote = _useState4[0],\n      setQuote = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      subscription = _useState8[0],\n      setSubscription = _useState8[1];\n\n  useEffect(function () {\n    generateQuote();\n  }, []);\n  useEffect(function () {\n    Accelerometer.setUpdateInterval(1000);\n    subscribe();\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  useEffect(function () {\n    if (isShakingEnough(data)) {\n      generateQuote();\n    }\n  }, [data]);\n\n  var subscribe = function subscribe() {\n    setSubscription(Accelerometer.addListener(function (accelerometerData) {\n      setData(accelerometerData);\n    }));\n  };\n\n  var unsubscribe = function unsubscribe() {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(function () {\n    subscribe();\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n\n  var generateQuote = function generateQuote() {\n    setLoading(true);\n    fetch(\"http://api.quotable.io/random\").then(function (res) {\n      return res.json();\n    }).then(function (quote) {\n      return setQuote(quote);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  };\n\n  var isShakingEnough = function isShakingEnough(data) {\n    var totalForce = Math.abs(data.x) + Math.abs(data.y) + Math.abs(data.z);\n    return totalForce > 1.78;\n  };\n\n  if (loading) {\n    return React.createElement(ActivityIndicator, null);\n  }\n\n  var x = data.x,\n      y = data.y,\n      z = data.z;\n  return React.createElement(View, null, React.createElement(InfoText, null, \"shake your phone gently to generate new quote!\"), React.createElement(QuoteText, null, quote.content), React.createElement(AuthorText, null, \"Author: \", quote.author));\n};\n\nexport default ShakeApi;","map":{"version":3,"sources":["C:/Users/helen/Desktop/react-native-quote-generator/components/ShakeApi.js"],"names":["React","useState","useEffect","styled","Accelerometer","QuoteText","Text","InfoText","AuthorText","ShakeApi","x","y","z","data","setData","quote","setQuote","loading","setLoading","subscription","setSubscription","generateQuote","setUpdateInterval","subscribe","unsubscribe","isShakingEnough","addListener","accelerometerData","remove","fetch","then","res","json","finally","totalForce","Math","abs","content","author"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,IAAMC,SAAS,GAAGF,MAAM,CAACG,IAAV,0KAAf;AAOA,IAAMC,QAAQ,GAAGJ,MAAM,CAACG,IAAV,oIAAd;AAMA,IAAME,UAAU,GAAGL,MAAM,CAACG,IAAV,+FAAhB;;AAIA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,kBAAwBR,QAAQ,CAAC;AAC/BS,IAAAA,CAAC,EAAE,CAD4B;AAE/BC,IAAAA,CAAC,EAAE,CAF4B;AAG/BC,IAAAA,CAAC,EAAE;AAH4B,GAAD,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAKA,mBAA0Bb,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOc,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8Bf,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOgB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAwCjB,QAAQ,CAAC,IAAD,CAAhD;AAAA;AAAA,MAAOkB,YAAP;AAAA,MAAqBC,eAArB;;AAEAlB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIAnB,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,aAAa,CAACkB,iBAAd,CAAgC,IAAhC;AACAC,IAAAA,SAAS;AACT,WAAO;AAAA,aAAMC,WAAW,EAAjB;AAAA,KAAP;AACD,GAJQ,EAIN,EAJM,CAAT;AAMAtB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIuB,eAAe,CAACZ,IAAD,CAAnB,EAA2B;AACzBQ,MAAAA,aAAa;AACd;AACF,GAJQ,EAIN,CAACR,IAAD,CAJM,CAAT;;AAMA,MAAMU,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBH,IAAAA,eAAe,CACbhB,aAAa,CAACsB,WAAd,CAA0B,UAACC,iBAAD,EAAuB;AAC/Cb,MAAAA,OAAO,CAACa,iBAAD,CAAP;AACD,KAFD,CADa,CAAf;AAKD,GAND;;AAQA,MAAMH,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBL,IAAAA,YAAY,IAAIA,YAAY,CAACS,MAAb,EAAhB;AACAR,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAHD;;AAKAlB,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,SAAS;AACT,WAAO;AAAA,aAAMC,WAAW,EAAjB;AAAA,KAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAMH,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAW,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACf,KAAD;AAAA,aAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,KAFR,EAGGkB,OAHH,CAGW;AAAA,aAAMf,UAAU,CAAC,KAAD,CAAhB;AAAA,KAHX;AAID,GAND;;AAOA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACZ,IAAD,EAAU;AAChC,QAAMqB,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASvB,IAAI,CAACH,CAAd,IAAmByB,IAAI,CAACC,GAAL,CAASvB,IAAI,CAACF,CAAd,CAAnB,GAAsCwB,IAAI,CAACC,GAAL,CAASvB,IAAI,CAACD,CAAd,CAAzD;AACA,WAAOsB,UAAU,GAAG,IAApB;AACD,GAHD;;AAKA,MAAIjB,OAAJ,EAAa;AACX,WAAO,oBAAC,iBAAD,OAAP;AACD;;AACD,MAAQP,CAAR,GAAoBG,IAApB,CAAQH,CAAR;AAAA,MAAWC,CAAX,GAAoBE,IAApB,CAAWF,CAAX;AAAA,MAAcC,CAAd,GAAoBC,IAApB,CAAcD,CAAd;AAEA,SACE,oBAAC,IAAD,QACE,oBAAC,QAAD,yDADF,EAGE,oBAAC,SAAD,QAAYG,KAAK,CAACsB,OAAlB,CAHF,EAIE,oBAAC,UAAD,oBAAqBtB,KAAK,CAACuB,MAA3B,CAJF,CADF;AAQD,CArED;;AAsEA,eAAe7B,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, Text, ActivityIndicator } from \"react-native\";\r\nimport styled from \"styled-components/native\";\r\nimport { Accelerometer } from \"expo-sensors\";\r\n\r\nconst QuoteText = styled.Text`\r\n  color: #e8589d;\r\n  font-weight: 700;\r\n  font-size: 25px;\r\n  width: 300px;\r\n  margin: 20px;\r\n`;\r\nconst InfoText = styled.Text`\r\n  font-size: 20px;\r\n  width: 300px;\r\n  margin: 20px;\r\n`;\r\n\r\nconst AuthorText = styled.Text`\r\n  margin: 20px;\r\n`;\r\n\r\nconst ShakeApi = () => {\r\n  const [data, setData] = useState({\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n  });\r\n  const [quote, setQuote] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [subscription, setSubscription] = useState(null);\r\n\r\n  useEffect(() => {\r\n    generateQuote();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Accelerometer.setUpdateInterval(1000);\r\n    subscribe();\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isShakingEnough(data)) {\r\n      generateQuote();\r\n    }\r\n  }, [data]);\r\n\r\n  const subscribe = () => {\r\n    setSubscription(\r\n      Accelerometer.addListener((accelerometerData) => {\r\n        setData(accelerometerData);\r\n      })\r\n    );\r\n  };\r\n\r\n  const unsubscribe = () => {\r\n    subscription && subscription.remove();\r\n    setSubscription(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    subscribe();\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const generateQuote = () => {\r\n    setLoading(true);\r\n    fetch(\"http://api.quotable.io/random\")\r\n      .then((res) => res.json())\r\n      .then((quote) => setQuote(quote))\r\n      .finally(() => setLoading(false));\r\n  };\r\n  const isShakingEnough = (data) => {\r\n    const totalForce = Math.abs(data.x) + Math.abs(data.y) + Math.abs(data.z);\r\n    return totalForce > 1.78;\r\n  };\r\n\r\n  if (loading) {\r\n    return <ActivityIndicator />;\r\n  }\r\n  const { x, y, z } = data;\r\n\r\n  return (\r\n    <View>\r\n      <InfoText>shake your phone gently to generate new quote!</InfoText>\r\n\r\n      <QuoteText>{quote.content}</QuoteText>\r\n      <AuthorText>Author: {quote.author}</AuthorText>\r\n    </View>\r\n  );\r\n};\r\nexport default ShakeApi;\r\n"]},"metadata":{},"sourceType":"module"}